#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""
Created on Thu Sep 12 09:42:34 2019

@author: jan
"""

#from ete3 import Tree
import ete3
import os
import matplotlib.pyplot as plt

'''
Set directory paths.
Make sure to run this script from git/state_of_the_art_gapfilling/scripts.
'''
current_dir = os.getcwd()
split_dir = current_dir.split('/')
files_folder = '/'+os.path.join(*split_dir[:-1])+'/files/'
data_folder = '/'+os.path.join(*split_dir[:-2])+'/data/'

#Read phyla_colors, taxonomy from file (generated by 09-16_get_taxonomy.py)
phyla_colors = eval(file(files_folder+'phyla_colors.txt', 'r').read())
taxonomy = eval(file(files_folder+'taxonomy.txt', 'r').read())

color_scheme = {k:v for k,v in phyla_colors.items() if v != 'gray'}

#Load tree
hmm_contree = ete3.Tree(files_folder+'concatenated_msa_trimmed.contree')

root_node = hmm_contree.get_common_ancestor('1104576.4', '633148.11')
hmm_contree.set_outgroup(root_node)

#Map strains to nr of genes used for alignment
#nr_genes_used = {}
#folder = '/home/jan/trees/genera_tree/mfa/'
#genes = [gene for gene in os.listdir(folder) if '.' not in gene]
#for gene in genes:
#    gene_mfa = file(folder + gene, 'r')
#    for line in gene_mfa:
#        if '>' in line:
#            strain = line.strip()[1:]
#            if strain in nr_genes_used:
#                nr_genes_used[strain] +=1
#            else:
#                nr_genes_used[strain] = 1

#Check position in tree for all genomes that did not have a lot of genes present
#cutoff = 25
#few_genes_used = [e for e in nr_genes_used if nr_genes_used[e] < cutoff]
#few_genes_used_tax = {e:taxonomy[e.split('.')[0]] for e in few_genes_used}
    
#Define TreeStyle
def color_by_phylum(node):
    if node.name.split('.')[0] in taxonomy:
        phylum = taxonomy[node.name.split('.')[0]][1] #taxonomy takes ncbi taxid as input, not patric id.
        node.img_style['bgcolor'] = phyla_colors[phylum]

def color_by_model(node):
    if node.name in ids_that_have_model:
        node.img_style['bgcolor'] = 'red'
    
ts = ete3.TreeStyle()
ts.mode = 'c'
ts.layout_fn = color_by_phylum
ts.show_branch_support = True
#Change names of leaves
#for node in hmm_contree.traverse():
#    if node.name in id_to_name:
#        node.name = id_to_name[node.name]
#        node.faces
